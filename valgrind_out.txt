==112467== Memcheck, a memory error detector
==112467== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==112467== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==112467== Command: ./minishell
==112467== Parent PID: 112464
==112467== 
==112467== Invalid write of size 8
==112467==    at 0x408ACF: tk_splitter (tk_split.c:56)
==112467==    by 0x406EBC: ms_exec (ms_exec.c:21)
==112467==    by 0x406A22: main (ms_main.c:35)
==112467==  Address 0x4b6e470 is 0 bytes after a block of size 16 alloc'd
==112467==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==112467==    by 0x4036ED: ft_calloc (ft_calloc.c:20)
==112467==    by 0x408A54: tk_splitter (tk_split.c:46)
==112467==    by 0x406EBC: ms_exec (ms_exec.c:21)
==112467==    by 0x406A22: main (ms_main.c:35)
==112467== 
==112467== Invalid read of size 8
==112467==    at 0x408ADB: tk_splitter (tk_split.c:57)
==112467==    by 0x406EBC: ms_exec (ms_exec.c:21)
==112467==    by 0x406A22: main (ms_main.c:35)
==112467==  Address 0x4b6e470 is 0 bytes after a block of size 16 alloc'd
==112467==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==112467==    by 0x4036ED: ft_calloc (ft_calloc.c:20)
==112467==    by 0x408A54: tk_splitter (tk_split.c:46)
==112467==    by 0x406EBC: ms_exec (ms_exec.c:21)
==112467==    by 0x406A22: main (ms_main.c:35)
==112467== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 80, hi = 79095360.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==112467==    at 0x5804284A: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x58042977: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x58042B1B: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x5804C8CF: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x5803AE9A: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x580395B7: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x5803DF3D: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x58038868: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x1002FCC2D1: ???
==112467==    by 0x1002DA9F2F: ???
==112467==    by 0x581FCD83: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==112467==    by 0x1002DA9F17: ???
==112467==    by 0x1002DA9F2F: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 112467)
==112467==    at 0x408B09: tk_splitter (tk_split.c:61)
==112467==    by 0x406EBC: ms_exec (ms_exec.c:21)
==112467==    by 0x406A22: main (ms_main.c:35)
client stack range: [0x1FFEFE6000 0x1FFF000FFF] client SP: 0x1FFEFFFBF0
valgrind stack range: [0x1002CAA000 0x1002DA9FFF] top usage: 18744 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

