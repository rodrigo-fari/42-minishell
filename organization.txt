   ▄▄▄▄███▄▄▄▄    ▄█  ███▄▄▄▄    ▄█     ▄████████    ▄█    █▄       ▄████████  ▄█        ▄█       
 ▄██▀▀▀███▀▀▀██▄ ███  ███▀▀▀██▄ ███    ███    ███   ███    ███     ███    ███ ███       ███       
 ███   ███   ███ ███▌ ███   ███ ███▌   ███    █▀    ███    ███     ███    █▀  ███       ███       
 ███   ███   ███ ███▌ ███   ███ ███▌   ███         ▄███▄▄▄▄███▄▄  ▄███▄▄▄     ███       ███       
 ███   ███   ███ ███▌ ███   ███ ███▌ ▀███████████ ▀▀███▀▀▀▀███▀  ▀▀███▀▀▀     ███       ███       
 ███   ███   ███ ███  ███   ███ ███           ███   ███    ███     ███    █▄  ███       ███       
 ███   ███   ███ ███  ███   ███ ███     ▄█    ███   ███    ███     ███    ███ ███▌    ▄ ███▌    ▄ 
  ▀█   ███   █▀  █▀    ▀█   █▀  █▀    ▄████████▀    ███    █▀      ██████████ █████▄▄██ █████▄▄██ 
                                                                              ▀         ▀         

=======================================| Organizacao de pastas |

📁42_MINISHELL/
│
├──📁inc/
│   └──minishell.h
├──📁src/
│   ├────📁sub-folder1/
│   │     ├────────📄file1.c
│   │     └────────📄file2.c
│   ├────📁sub-folder2/
│   │     ├────────📄file1.c
│   │     └────────📄file2.c
│   └────📁sub-folder3/
│         ├────────📄file1.c
│         └────────📄file2.c
└──Makefile

=======================================| Git commands |

git pull : atualiza o ropositorio no seu computador

git branch : lista todas as branchs do repostiorio

git branch -b "nome da branch sem aspas" : Cria e troca para a branch criada

git push --set-upstream origin "nome da branch sem aspas" : Ativa a sua branch no repositorio.

git branch -d "nome da branch sem aspas" : Deleta a branch local ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️

Quando trocar para a branch, e realizar todas as alterações, lembrar de dar 
git push na branch. Isso ira criar um pull request no github.

Lembrar de dar git pull no começo de todo o dia de trabalho.

=======================================| Necessidades do projeto |

1.Prompt interativo:
	Mostrar prompt enquanto espera comando.

2.Command execution:
	Must find and execute the correct command using the PATH or an absolute/relative path.

3.Signal Handling:
	ctrl+c : Display a new  prompt
	ctrl+d : Sai do shell
	ctrl+\ : Faz nada

4.Aspas e caracters especiais:
	' : Ignora caracters especiais dentro das aspas (simples)
	" : Interpreta "$" para variaveis mas ignora outros caracters especiais

5.Redirecionamento e pipes:
	< : Redirecionamento de input
	> : Redirecionamento de output
	>> : Redirecionamento de output e "aappend mode"
	<< : Le ate chegar em um delimitador
	| : Conecta os comandos pelo pipe

6.Variaveis de ambiente:
	$ : Suporte de variaveis ultilizando "$"
	? : Expande o status de saida do ultimo comando

7.Comandos Built-in
	echo : com o "-n"
	cd : com paths relativos e absolutos
	pwd : (no options)
	export : (no options)
	unset : (no options)
	env : (no arguments)
	exit : (no options)

=======================================| Organizacao de tarefas |

|👦🏻👩🏻‍🦰|Criacao da base:
	Iniciacao do projeto (n sei por onde comecar)

|👦🏻|Parsing e interpretacao de comandos:
	Parsing e user input (Manoseamento de strings, variaveis de ambiente, aspas, etc.)

|👩🏻|Execucao de comandos e redirecionamentos:
	Lida com execucao de comandos incluindo redirecionamentos e pipes

|👩🏻‍🦰|Implementacao de controle de processo:
	Implementa o controle de processos (fork, execve, etc.) e manipulação de sinais (ctrl+c)

|👩🏻‍🦰|Comandos Built-in:
	Separar a implementacao de built-ins (cd, echo)

|👦🏻👩🏻‍🦰|Integracao e testes:
	Normal testing :)

(apenas minha opiniao, nao precisa ser assim ksks :p)

=======================================| Funcoes autorizadas |

|📗|Funções de entrada/saída e memória:

readline: Lê uma linha de entrada do usuário, permitindo edição interativa.
rl_clear_history: Limpa o histórico de comandos armazenado por readline.
rl_on_new_line: Informa ao readline que uma nova linha está sendo processada.
rl_replace_line: Substitui a linha atual no buffer do readline.
rl_redisplay: Redesenha a linha atual no terminal.
add_history: Adiciona uma linha ao histórico de comandos do readline.
printf: Imprime texto formatado na saída padrão.
write: Escreve dados em um arquivo ou saída, como stdout.
malloc: Aloca memória dinâmica.
free: Libera memória previamente alocada com malloc.


|📘|Funções de arquivos e diretórios:

access: Verifica permissões de acesso a um arquivo.
open: Abre um arquivo e retorna um descritor de arquivo.
read: Lê dados de um arquivo ou entrada.
close: Fecha um descritor de arquivo.
unlink: Remove um arquivo do sistema de arquivos.
stat: Obtém informações sobre um arquivo (por caminho).
lstat: Similar a stat, mas trata links simbólicos.
fstat: Obtém informações sobre um arquivo usando um descritor.
opendir: Abre um diretório para leitura de arquivos.
readdir: Lê a próxima entrada em um diretório aberto.
closedir: Fecha um diretório previamente aberto com opendir.


|📙|Funções de processos e sinais:

fork: Cria um novo processo, duplicando o processo atual.
wait: Espera um processo filho terminar.
waitpid: Espera por um processo filho específico terminar.
wait3 e wait4: Semelhantes a wait, mas fornecem mais informações sobre o processo filho.
signal: Define um manipulador para um sinal específico.
sigaction: Configura ações para sinais com mais controle do que signal.
sigemptyset: Inicializa um conjunto de sinais vazio.
sigaddset: Adiciona um sinal a um conjunto de sinais.
kill: Envia um sinal a um processo ou grupo de processos.
exit: Termina um processo.


|📕|Funções de manipulação de terminal:

isatty: Verifica se um descritor de arquivo refere-se a um terminal.
ttyname: Retorna o nome do terminal associado a um descritor de arquivo.
ttyslot: Retorna o número da sessão de terminal.
ioctl: Controla dispositivos de E/S, incluindo terminais.
tcsetattr: Configura atributos de um terminal.
tcgetattr: Obtém atributos de um terminal.


|📗|Funções de variáveis de ambiente:

getenv: Obtém o valor de uma variável de ambiente.


|📘|Funções de manipulação de caminhos e diretórios:

getcwd: Obtém o diretório de trabalho atual.
chdir: Altera o diretório de trabalho atual.



|📙|Funções de execução de programas:

execve: Substitui o processo atual por um novo programa.


|📗|Funções de pipes e descritores:

dup: Duplica um descritor de arquivo.
dup2: Duplica um descritor de arquivo para um descritor específico.
pipe: Cria um canal unidirecional de comunicação entre processos.


|📘|Funções de tratamento de erros:

strerror: Retorna uma mensagem descritiva do erro correspondente a um número.
perror: Imprime uma mensagem de erro com base na variável global errno.


|📕|Funções de termcap (manipulação avançada de terminais):

tgetent: Inicializa o banco de dados de capacidades do terminal.
tgetflag: Retorna o valor de uma flag de capacidade do terminal.
tgetnum: Retorna o valor numérico de uma capacidade do terminal.
tgetstr: Retorna o valor de uma string de capacidade do terminal.
tgoto: Calcula uma string de posição de cursor para o terminal.
tputs: Envia uma string formatada ao terminal.

=======================================| Shell operation |

The following is a brief description of the shell’s operation when it reads and executes a command. Basically, the shell does the following:

1. Reads its input from a file (see Shell Scripts), from a string supplied as an argument to the -c invocation option (see Invoking Bash), or from the user’s terminal.
2. Breaks the input into words and operators, obeying the quoting rules described in Quoting. These tokens are separated by metacharacters. Alias expansion is performed by this step (see Aliases).
3. Parses the tokens into simple and compound commands (see Shell Commands).
4. Performs the various shell expansions (see Shell Expansions), breaking the expanded tokens into lists of filenames (see Filename Expansion) and commands and arguments.
5. Performs any necessary redirections (see Redirections) and removes the redirection operators and their operands from the argument list.
6. Executes the command (see Executing Commands).
7. Optionally waits for the command to complete and collects its exit status (see Exit Status).


3.1.2 Quoting
Quoting is used to remove the special meaning of certain characters or words to the shell. Quoting can be used to disable special treatment for special characters, to prevent reserved words from being recognized as such, and to prevent parameter expansion.
Each of the shell metacharacters (see Definitions) has special meaning to the shell and must be quoted if it is to represent itself. When the command history expansion facilities are being used (see History Expansion), the history expansion character, usually ‘!’, must be quoted to prevent history expansion. See Bash History Facilities, for more details concerning history expansion.
There are three quoting mechanisms: the escape character, single quotes, and double quotes.

3.1.2.2 Single Quotes
Enclosing characters in single quotes (‘'’) preserves the literal value of each character within the quotes. A single quote may not occur between single quotes, even when preceded by a backslash.
3.1.2.3 Double Quote
Enclosing characters in double quotes (‘"’) preserves the literal value of all characters within the quotes, with the exception of ‘$’, ‘`’, ‘\’, and, when history expansion is enabled, ‘!’. When the shell is in POSIX mode (see Bash POSIX Mode), the ‘!’ has no special meaning within double quotes, even when history expansion is enabled. The characters ‘$’ and ‘`’ retain their special meaning within double quotes (see Shell Expansions). The backslash retains its special meaning only when followed by one of the following characters: ‘$’, ‘`’, ‘"’, ‘\’, or newline. Within double quotes, backslashes that are followed by one of these characters are removed. Backslashes preceding characters without a special meaning are left unmodified. A double quote may be quoted within double quotes by preceding it with a backslash. If enabled, history expansion will be performed unless an ‘!’ appearing in double quotes is escaped using a backslash. The backslash preceding the ‘!’ is not removed.
The special parameters ‘*’ and ‘@’ have special meaning when in double quotes (see Shell Parameter Expansion)

=======================================| BASH Reference |

https://www.gnu.org/software/bash/manual/bash.html

=======================================| ASCII ART e Emojis |


💻 💿 ⚙️ 🔧 📌
❌ ⛔️ 🚫 ⚠️ ✅
➡️ ↩️ ↪️ 🔀 🔁
🔴 🔵 🟢 💭 🫣 🟢🔴

   ▄▄▄▄███▄▄▄▄    ▄█  ███▄▄▄▄    ▄█     ▄████████    ▄█    █▄       ▄████████  ▄█        ▄█       
 ▄██▀▀▀███▀▀▀██▄ ███  ███▀▀▀██▄ ███    ███    ███   ███    ███     ███    ███ ███       ███       
 ███   ███   ███ ███▌ ███   ███ ███▌   ███    █▀    ███    ███     ███    █▀  ███       ███       
 ███   ███   ███ ███▌ ███   ███ ███▌   ███         ▄███▄▄▄▄███▄▄  ▄███▄▄▄     ███       ███       
 ███   ███   ███ ███▌ ███   ███ ███▌ ▀███████████ ▀▀███▀▀▀▀███▀  ▀▀███▀▀▀     ███       ███       
 ███   ███   ███ ███  ███   ███ ███           ███   ███    ███     ███    █▄  ███       ███       
 ███   ███   ███ ███  ███   ███ ███     ▄█    ███   ███    ███     ███    ███ ███▌    ▄ ███▌    ▄ 
  ▀█   ███   █▀  █▀    ▀█   █▀  █▀    ▄████████▀    ███    █▀      ██████████ █████▄▄██ █████▄▄██ 
                                                                              ▀         ▀         



   ▄▄▄▄███▄▄▄▄      ▄████████    ▄█    █▄       ▄████████  ▄█        ▄█       
 ▄██▀▀▀███▀▀▀██▄   ███    ███   ███    ███     ███    ███ ███       ███       
 ███   ███   ███   ███    █▀    ███    ███     ███    █▀  ███       ███       
 ███   ███   ███   ███         ▄███▄▄▄▄███▄▄  ▄███▄▄▄     ███       ███       
 ███   ███   ███ ▀███████████ ▀▀███▀▀▀▀███▀  ▀▀███▀▀▀     ███       ███       
 ███   ███   ███          ███   ███    ███     ███    █▄  ███       ███       
 ███   ███   ███    ▄█    ███   ███    ███     ███    ███ ███▌    ▄ ███▌    ▄ 
  ▀█   ███   █▀   ▄████████▀    ███    █▀      ██████████ █████▄▄██ █████▄▄██ 
                                                          ▀         ▀         


